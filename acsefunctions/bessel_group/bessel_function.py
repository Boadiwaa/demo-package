import numpy as np


def factorial(n):
    """
    Compute factorial for a scalar or numpy array.
    Parameters
    ----------
    int or float or list of integers or np.array
        n: Input value(s) for which to compute the factorial.
    Returns
    -------
    np.float or np.array
        Factorial of the input(s).
    Example
    -------
    >>> factorial([0, 1, 2, 3, 4, 5])
    array([  1.,   1.,   2.,   6.,  24., 120.])

    """
    n = np.atleast_1d(n)
    result = np.zeros_like(n, dtype=float)
    for i in range(len(n)):
        if n[i] < 0:
            result[i] = np.nan
        else:
            fact = 1
            for j in range(1, n[i] + 1):
                fact *= j
            result[i] = fact

    return result


def gamma_function(z):
    """
    Compute Gamma function for a scalar or numpy array.

     Parameters
    ----------
    int or float or list of integers or np.array
        z: Input value(s) for which to compute the gamma function.

    Returns
    -------
    np.float or np.array
        Gamma function value of the input(s).

    Example
    -------
    >>> gamma_function([1, 1.5, 2, 2.5, 3, 4])
    array([1.05088491, 0.87972523, 0.99916542, 1.32925696, 1.99999916,
           6.00000083])

    """
    z = np.atleast_1d(z)
    result = np.zeros_like(z, dtype=float)  # Initialize result array as float

    for i in range(len(z)):
        if z[i] <= 0:
            result[i] = (
                np.nan
            )  # Handle invalid inputs (Gamma not defined for non-positive)
        else:
            # Use numerical integration (trapezoidal rule) for Gamma function
            t = np.linspace(0, 100, num=1000)  # Range of integration
            integrand = t ** (z[i] - 1) * np.exp(-t)
            dt = t[1] - t[0]  # Step size
            result[i] = np.sum(integrand) * dt  # Trapezoidal rule

    return result


def bessel(alpha, x, terms=50):
    """
    Compute the bessel function for a scalar or numpy array.

    Parameters
    ----------
    float or np.array
        alpha: Order of the Bessel function.

    int or float or list of integers or np.array
        x: Input value(s) at which to evaluate the Bessel function.

    Returns
    -------
    np.float or np.array
        Approximation of the Bessel function.

    Example
    -------
    >>> bessel(1,[0, 1, 2, 3, 4, 5])
    array([ 0.        ,  0.4404682 ,  0.57755987,  0.34031109, -0.06437481,
           -0.32549533])

    """
    # Ensure that alpha and x are arrays
    alpha = np.asarray(alpha)
    x = np.asarray(x)

    result = np.zeros_like(x, dtype=float)

    # Series expansion loop
    for m in range(terms):
        fact = factorial(m)
        gamma_val = gamma_function(m + alpha + 1)

        if np.any(gamma_val == 0):
            continue

        # Compute each term in the series
        term = ((-1) ** m / (fact * gamma_val)) * ((x / 2) ** (2 * m + alpha))
        result += term

    return result

# NB: ChatGPT was used to assist in providing array-compatible
# versions of these functions
# np.atleast_1d() was copied entirely from ChatGPT
# All the comments above were generated by ChatGPT as well
# as code structure, but code has been significantly modified by me


if __name__ == "__main__":
    import doctest

    doctest.testmod()
